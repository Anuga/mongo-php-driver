{
    "docs": [
        {
            "location": "/", 
            "text": "What is pecl/mongodb?\n\n\npecl/mongodb\n is an\nexperimental MongoDB driver for PHP, likely replacing the\n\nmongodb/mongo-php-driver\n driver in the\nnear future.\n\n\npecl/mongodb is written ontop of \nlibmongoc\n and\n\nlibbson\n, and is meant to be as basic as possible.\nCore MongoDB concepts are implemented, but everything else is left for other toolkits\nto come in and provide pretty and flexible bindings that make sense for their ecosystem.\n\n\nThis makes the driver exceptionally fast, and really easy to work with and provide\nfirst class experience in your framework, library or application.\n\n\nThe plan is to provide an example bindings, which you may chose to use - or ignore\nand make your own.\n\n\nInstallation\n\n\nUltimately, this extension is not intended to be explicitly installed. Users should\nchoose one (or more) userland PHP libraries that depend on this driver, and install\nthem using, for example, Composer.\n\n\nTo build and install the driver:\n\n\n$ pecl install mongodb-alpha\n$ echo \"extension=mongodb.so\" \n `php --ini | grep \"Loaded Configuration\" | sed -e \"s|.*:\\s*||\"`", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-peclmongodb", 
            "text": "pecl/mongodb  is an\nexperimental MongoDB driver for PHP, likely replacing the mongodb/mongo-php-driver  driver in the\nnear future.  pecl/mongodb is written ontop of  libmongoc  and libbson , and is meant to be as basic as possible.\nCore MongoDB concepts are implemented, but everything else is left for other toolkits\nto come in and provide pretty and flexible bindings that make sense for their ecosystem.  This makes the driver exceptionally fast, and really easy to work with and provide\nfirst class experience in your framework, library or application.  The plan is to provide an example bindings, which you may chose to use - or ignore\nand make your own.", 
            "title": "What is pecl/mongodb?"
        }, 
        {
            "location": "/#installation", 
            "text": "Ultimately, this extension is not intended to be explicitly installed. Users should\nchoose one (or more) userland PHP libraries that depend on this driver, and install\nthem using, for example, Composer.  To build and install the driver:  $ pecl install mongodb-alpha\n$ echo \"extension=mongodb.so\"   `php --ini | grep \"Loaded Configuration\" | sed -e \"s|.*:\\s*||\"`", 
            "title": "Installation"
        }, 
        {
            "location": "/crud/", 
            "text": "Basic CRUD\n\n\n?php\n\n/* The document we'll be working with */\n$document = array(\nhello\n =\n \nworld\n);\n\n/* We want to gurantee all writes to the majority of our nodes */\n$w = MongoDB\\Driver\\WriteConcern::MAJORITY;\n\n/* But don't be waiting on me fore more then 1000ms (1sec),\n * I have an application to run! */\n$wtimeout = 1000;\n\n/* Construct the WriteConcern object from our options */\n$wc = new MongoDB\\Driver\\WriteConcern($w, $wtimeout);\n\n\n/* We prefer to read from the secondary, but are OK to read from the primary\n * if we can't find any secondaries */\n$prefer = MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED;\n$tags = array(\n    /* Prefer the West Coast datacenter in Iceland */\n    array(\ncountry\n =\n \niceland\n, \ndatacenter\n =\n \nwest\n),\n\n    /* Fallback to any datacenter in Iceland */\n    array(\ncountry\n =\n \niceland\n),\n\n    /* If Iceland is offline, read from whatever is online! */\n    array(),\n);\n\n/* Construct the ReadPreference object from our options */\n$rp = new MongoDB\\Driver\\ReadPreference($prefer, $tags);\n\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager(\nmongodb://localhost:27017\n);\n\n?\n\n\n\n\n\nCREATE\n\n\n?php\n\ntry {\n    /* Full namespace as the first argumnet (databasename.collectionname),\n     * and the document to insert as the second.\n     *\n     * Returns MongoDB\\Driver\\WriteResult on success, throws exception on failure\n     */\n    $result = $manager-\nexecuteInsert(\ndb.collection\n, $document, $wc);\n} catch(Exception $e) {\n    echo $e-\ngetMessage(), \n\\n\n;\n    exit;\n}\n\n?\n\n\n\n\n\nREAD\n\n\n?php\n\n/* Construct an empty find query (\nselect all\n) */\n$query = new MongoDB\\Driver\\Query(array());\n\ntry {\n    /* Full namespace as the first argument (dbname.collname), and the query object\n     * to execute as the second.\n     * Returns MongoDB\\Driver\\Cursor on success, throws exception on failure\n     */\n    $cursor = $manager-\nexecuteQuery(\ndb.collection\n, $query, $rp);\n\n    /* Iterate over all matched documents */\n    foreach($cursor as $document) {\n        var_dump($document);\n    }\n} catch(Exception $e) {\n    echo $e-\ngetMessage(), \n\\n\n;\n    exit;\n}\n\n?\n\n\n\n\n\nUPDATE\n\n\n?php\n\n/* The search criteria */\n$where = array(\nhello\n =\n \nworld\n);\n\n/* What to update the matched document with */\n$set = array('$set' =\n array(\nhello\n =\n \nwonderful world\n));\n\n/* Special MongoDB wireprotocol options:\n *   limit: integer. Updates all matching document when 0 (false).\n *                   Only the first matching document when \n 0 (true).\n *   upsert: boolean. If there is no matching document, create a new document\n *                    from the $where and apply the $set\n */\n$options = array(\nlimit\n =\n 1, \nupsert\n =\n false);\ntry {\n    /* Full namespace as the first argument (dbname.collname), the search criteria\n     * second.\n     * Returns MongoDB\\Driver\\WriteResult on success, throws exception on failure\n     */\n    $result = $manager-\nexecuteUpdate(\ndb.collection\n, $where, $set, $options, $wc);\n    var_dump($result);\n} catch(Exception $e) {\n    echo $e-\ngetMessage(), \n\\n\n;\n    exit;\n}\n\n?\n\n\n\n\n\nDELETE\n\n\n?php\n\n/* The search criteria */\n$where = array(\nhello\n =\n \nworld\n);\n\n/* Special MongoDB wireprotocol options:\n *   limit: integer. Updates all matching document when \n 0 (true).\n *                   Only the first matching document when 0 (false).\n */\n$options = array(\nlimit\n =\n 1);\ntry {\n    /*\n    /* Full namespace as the first argument (dbname.collname), the search criteria\n     * second.\n     * Returns MongoDB\\Driver\\WriteResult on success, throws exception on failure\n     */\n    $result = $manager-\nexecuteDelete(\ndb.collection\n, $where, $options, $wc);\n    var_dump($result);\n} catch(Exception $e) {\n    echo $e-\ngetMessage(), \n\\n\n;\n    exit;\n}\n\n?", 
            "title": "Basic"
        }, 
        {
            "location": "/crud/#basic-crud", 
            "text": "?php\n\n/* The document we'll be working with */\n$document = array( hello  =   world );\n\n/* We want to gurantee all writes to the majority of our nodes */\n$w = MongoDB\\Driver\\WriteConcern::MAJORITY;\n\n/* But don't be waiting on me fore more then 1000ms (1sec),\n * I have an application to run! */\n$wtimeout = 1000;\n\n/* Construct the WriteConcern object from our options */\n$wc = new MongoDB\\Driver\\WriteConcern($w, $wtimeout);\n\n\n/* We prefer to read from the secondary, but are OK to read from the primary\n * if we can't find any secondaries */\n$prefer = MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED;\n$tags = array(\n    /* Prefer the West Coast datacenter in Iceland */\n    array( country  =   iceland ,  datacenter  =   west ),\n\n    /* Fallback to any datacenter in Iceland */\n    array( country  =   iceland ),\n\n    /* If Iceland is offline, read from whatever is online! */\n    array(),\n);\n\n/* Construct the ReadPreference object from our options */\n$rp = new MongoDB\\Driver\\ReadPreference($prefer, $tags);\n\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager( mongodb://localhost:27017 );\n\n?", 
            "title": "Basic CRUD"
        }, 
        {
            "location": "/crud/#create", 
            "text": "?php\n\ntry {\n    /* Full namespace as the first argumnet (databasename.collectionname),\n     * and the document to insert as the second.\n     *\n     * Returns MongoDB\\Driver\\WriteResult on success, throws exception on failure\n     */\n    $result = $manager- executeInsert( db.collection , $document, $wc);\n} catch(Exception $e) {\n    echo $e- getMessage(),  \\n ;\n    exit;\n}\n\n?", 
            "title": "CREATE"
        }, 
        {
            "location": "/crud/#read", 
            "text": "?php\n\n/* Construct an empty find query ( select all ) */\n$query = new MongoDB\\Driver\\Query(array());\n\ntry {\n    /* Full namespace as the first argument (dbname.collname), and the query object\n     * to execute as the second.\n     * Returns MongoDB\\Driver\\Cursor on success, throws exception on failure\n     */\n    $cursor = $manager- executeQuery( db.collection , $query, $rp);\n\n    /* Iterate over all matched documents */\n    foreach($cursor as $document) {\n        var_dump($document);\n    }\n} catch(Exception $e) {\n    echo $e- getMessage(),  \\n ;\n    exit;\n}\n\n?", 
            "title": "READ"
        }, 
        {
            "location": "/crud/#update", 
            "text": "?php\n\n/* The search criteria */\n$where = array( hello  =   world );\n\n/* What to update the matched document with */\n$set = array('$set' =  array( hello  =   wonderful world ));\n\n/* Special MongoDB wireprotocol options:\n *   limit: integer. Updates all matching document when 0 (false).\n *                   Only the first matching document when   0 (true).\n *   upsert: boolean. If there is no matching document, create a new document\n *                    from the $where and apply the $set\n */\n$options = array( limit  =  1,  upsert  =  false);\ntry {\n    /* Full namespace as the first argument (dbname.collname), the search criteria\n     * second.\n     * Returns MongoDB\\Driver\\WriteResult on success, throws exception on failure\n     */\n    $result = $manager- executeUpdate( db.collection , $where, $set, $options, $wc);\n    var_dump($result);\n} catch(Exception $e) {\n    echo $e- getMessage(),  \\n ;\n    exit;\n}\n\n?", 
            "title": "UPDATE"
        }, 
        {
            "location": "/crud/#delete", 
            "text": "?php\n\n/* The search criteria */\n$where = array( hello  =   world );\n\n/* Special MongoDB wireprotocol options:\n *   limit: integer. Updates all matching document when   0 (true).\n *                   Only the first matching document when 0 (false).\n */\n$options = array( limit  =  1);\ntry {\n    /*\n    /* Full namespace as the first argument (dbname.collname), the search criteria\n     * second.\n     * Returns MongoDB\\Driver\\WriteResult on success, throws exception on failure\n     */\n    $result = $manager- executeDelete( db.collection , $where, $options, $wc);\n    var_dump($result);\n} catch(Exception $e) {\n    echo $e- getMessage(),  \\n ;\n    exit;\n}\n\n?", 
            "title": "DELETE"
        }, 
        {
            "location": "/bulk/", 
            "text": "Bulk CRUD\n\n\n?php\n\n$hannes = array(\n    \nname\n    =\n \nHannes\n,\n    \nnick\n    =\n \nbjori\n,\n    \ncitizen\n =\n \nIceland\n,\n);\n$hayley = array(\n    \nname\n    =\n \nHayley\n,\n    \nnick\n    =\n \nAlien Ninja\n,\n    \ncitizen\n =\n \nUSA\n,\n);\n$jonpall = array(\n    \nname\n    =\n \nJon Pall\n,\n    \nnick\n    =\n \nunknown\n,\n    \ncitizen\n =\n \nIceland\n,\n);\n\n/* Ordered bulk is executed in the same order as we add the operations to it.\n * If operation fails the execution stops and no further operations executed.\n * For unordered bulk, the operations can be executed in any order by the database\n * in an attempt to optimize its workload. An operation failure will not stop\n * the exection of the rest of the operations.\n * Default: true\n */\n$ordered = true;\n\n$bulk = new MongoDB\\Driver\\BulkWrite($ordered);\n\n?\n\n\n\n\n\nCREATE\n\n\n?php\n\n/* Argument#1 The document (array/object) to insert.\n * Returns the generated BSON\\ObjectID if no _id was provided\n */\n$hannes_id  = $bulk-\ninsert($hannes);\n$hayley_id  = $bulk-\ninsert($hayley);\n$jonpall_id = $bulk-\ninsert($jonpall);\n\n?\n\n\n\n\n\nUPDATE\n\n\n?php\n\n/* Arguments\n *  #1: array, search criteria\n *  #2: array, the object or operations to apply to the matching document\n *  #3: array, wire protocol options:\n *             limit: integer, 0 or 1,\n *                  0: Apply to all matching documents\n *                  1: Only apply to the first matching document\n *              upsert: boolean\n *                  true: Insert new document matching the criteria\n *                  false: Do not insert new document if no matches are found\n */\n$bulk-\nupdate(\n    array(\n_id\n =\n $hayley_id),\n    array('$set' =\n array(\ncitizen\n =\n \nIceland\n)),\n    array(\nlimit\n =\n 1, \nupsert\n =\n false)\n);\n$bulk-\nupdate(\n    array(\ncitizen\n =\n \nIceland\n),\n    array('$set' =\n array(\nviking\n =\n true)),\n    array(\nlimit\n =\n 0, \nupsert\n =\n false)\n);\n$bulk-\nupdate(\n    array(\nname\n =\n \nChuck Norris\n),\n    array('$set' =\n array(\nviking\n =\n false)),\n    array(\nlimit\n =\n 1, \nupsert\n =\n true)\n);\n\n?\n\n\n\n\n\nDELETE\n\n\n?php\n\n/* Arguments\n *  #1: array, search criteria\n *  #2: array, wire protocol options:\n *             limit: integer, 0 or 1,\n *                  0: Delete all matching documents\n *                  1: Only delete the first matching document\n */\n$bulk-\ndelete(array(\n_id\n =\n $jonpall_id), array(\nlimit\n =\n 1));\n\n?\n\n\n\n\n\nExecuting and checking the results\n\n\n?php\n$manager = new MongoDB\\Driver\\Manager(\nmongodb://localhost:27017\n);\n$wc      = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY);\n$result  = $manager-\nexecuteBulkWrite(\ndb.collection\n, $bulk, $wc);\n\nprintf(\ninsertedCount: %d\\n\n, $result-\ngetInsertedCount());\nprintf(\nmatchedCount: %d\\n\n, $result-\ngetMatchedCount());\nprintf(\nmodifiedCount: %d\\n\n, $result-\ngetModifiedCount());\nprintf(\nupsertedCount: %d\\n\n, $result-\ngetUpsertedCount());\nprintf(\ndeletedCount: %d\\n\n, $result-\ngetDeletedCount());\n\nforeach ($result-\ngetUpsertedIds() as $index =\n $id) {\n    printf(\nupsertedId: '%s', index: %d\\n\n, $id, $index);\n}\n\n$query  = new MongoDB\\Driver\\Query(array(\nviking\n =\n false));\n$cursor = $manager-\nexecuteQuery(\ndb.collection\n, $query);\n/* Note that var_dump()ing the $cursor will print out all sorts of debug information\n * about the cursor, such as ReadPreferences used, the query executed, namespace,\n * query flags, and the current bulk information */\nvar_dump(iterator_to_array($cursor));\n\n?", 
            "title": "Bulks"
        }, 
        {
            "location": "/bulk/#bulk-crud", 
            "text": "?php\n\n$hannes = array(\n     name     =   Hannes ,\n     nick     =   bjori ,\n     citizen  =   Iceland ,\n);\n$hayley = array(\n     name     =   Hayley ,\n     nick     =   Alien Ninja ,\n     citizen  =   USA ,\n);\n$jonpall = array(\n     name     =   Jon Pall ,\n     nick     =   unknown ,\n     citizen  =   Iceland ,\n);\n\n/* Ordered bulk is executed in the same order as we add the operations to it.\n * If operation fails the execution stops and no further operations executed.\n * For unordered bulk, the operations can be executed in any order by the database\n * in an attempt to optimize its workload. An operation failure will not stop\n * the exection of the rest of the operations.\n * Default: true\n */\n$ordered = true;\n\n$bulk = new MongoDB\\Driver\\BulkWrite($ordered);\n\n?", 
            "title": "Bulk CRUD"
        }, 
        {
            "location": "/bulk/#create", 
            "text": "?php\n\n/* Argument#1 The document (array/object) to insert.\n * Returns the generated BSON\\ObjectID if no _id was provided\n */\n$hannes_id  = $bulk- insert($hannes);\n$hayley_id  = $bulk- insert($hayley);\n$jonpall_id = $bulk- insert($jonpall);\n\n?", 
            "title": "CREATE"
        }, 
        {
            "location": "/bulk/#update", 
            "text": "?php\n\n/* Arguments\n *  #1: array, search criteria\n *  #2: array, the object or operations to apply to the matching document\n *  #3: array, wire protocol options:\n *             limit: integer, 0 or 1,\n *                  0: Apply to all matching documents\n *                  1: Only apply to the first matching document\n *              upsert: boolean\n *                  true: Insert new document matching the criteria\n *                  false: Do not insert new document if no matches are found\n */\n$bulk- update(\n    array( _id  =  $hayley_id),\n    array('$set' =  array( citizen  =   Iceland )),\n    array( limit  =  1,  upsert  =  false)\n);\n$bulk- update(\n    array( citizen  =   Iceland ),\n    array('$set' =  array( viking  =  true)),\n    array( limit  =  0,  upsert  =  false)\n);\n$bulk- update(\n    array( name  =   Chuck Norris ),\n    array('$set' =  array( viking  =  false)),\n    array( limit  =  1,  upsert  =  true)\n);\n\n?", 
            "title": "UPDATE"
        }, 
        {
            "location": "/bulk/#delete", 
            "text": "?php\n\n/* Arguments\n *  #1: array, search criteria\n *  #2: array, wire protocol options:\n *             limit: integer, 0 or 1,\n *                  0: Delete all matching documents\n *                  1: Only delete the first matching document\n */\n$bulk- delete(array( _id  =  $jonpall_id), array( limit  =  1));\n\n?", 
            "title": "DELETE"
        }, 
        {
            "location": "/bulk/#executing-and-checking-the-results", 
            "text": "?php\n$manager = new MongoDB\\Driver\\Manager( mongodb://localhost:27017 );\n$wc      = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY);\n$result  = $manager- executeBulkWrite( db.collection , $bulk, $wc);\n\nprintf( insertedCount: %d\\n , $result- getInsertedCount());\nprintf( matchedCount: %d\\n , $result- getMatchedCount());\nprintf( modifiedCount: %d\\n , $result- getModifiedCount());\nprintf( upsertedCount: %d\\n , $result- getUpsertedCount());\nprintf( deletedCount: %d\\n , $result- getDeletedCount());\n\nforeach ($result- getUpsertedIds() as $index =  $id) {\n    printf( upsertedId: '%s', index: %d\\n , $id, $index);\n}\n\n$query  = new MongoDB\\Driver\\Query(array( viking  =  false));\n$cursor = $manager- executeQuery( db.collection , $query);\n/* Note that var_dump()ing the $cursor will print out all sorts of debug information\n * about the cursor, such as ReadPreferences used, the query executed, namespace,\n * query flags, and the current bulk information */\nvar_dump(iterator_to_array($cursor));\n\n?", 
            "title": "Executing and checking the results"
        }, 
        {
            "location": "/commands/", 
            "text": "Running Commands\n\n\nListing databases \n collections\n\n\n?php\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager(\nmongodb://localhost:27017\n);\n\n\n$listdatabases = new MongoDB\\Driver\\Command(array(\nlistDatabases\n =\n 1));\n$retval        = $manager-\nexecuteCommand(\nadmin\n, $listdatabases);\n$databases     = $retval-\ntoArray();\n\nforeach($databases[\ndatabases\n] as $database) {\n    echo $database-\nname, \n\\n\n;\n\n    $listcollections = new MongoDB\\Driver\\Command(array(\nlistCollections\n =\n 1));\n    $retval          = $manager-\nexecuteCommand($database-\nname, $listcollections);\n    $collections     = $retval-\ntoArray();\n    foreach($collections as $collection) {\n        echo \n\\t- \n, $collection-\nname, \n\\n\n;\n    }\n}\n\n?\n\n\n\n\n\nCreate a User\n\n\n?php\n\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager(\nmongodb://localhost:27017\n);\n\n\n$command = array(\n    \ncreateUser\n =\n \nUSERNAME2\n,\n    \npwd\n        =\n \nPASSWORD\n,\n    \nroles\n      =\n array(\n        array(\nrole\n =\n \nclusterAdmin\n,         \ndb\n =\n \nadmin\n),\n        array(\nrole\n =\n \nreadWriteAnyDatabase\n, \ndb\n =\n \nadmin\n),\n        array(\nrole\n =\n \nuserAdminAnyDatabase\n, \ndb\n =\n \nadmin\n),\n        \nreadWrite\n,\n    ),\n    \nwriteConcern\n =\n array(\nw\n =\n \nmajority\n),\n);\n$createuser = new MongoDB\\Driver\\Command($command);\n\ntry {\n    $result     = $manager-\nexecuteCommand(\nadmin\n, $createuser);\n    $response   = $result-\ntoArray();\n    if ($response[\nok\n]) {\n        echo \nUser created\\n\n;\n    }\n} catch(Exception $e) {\n    echo $e-\ngetMessage(), \n\\n\n;\n}\n\n\n?\n\n\n\n\n\nCommands and ReadPreferences\n\n\n?php\n\n/* Some commands, like count, dbStats, aggregate, ... can be executed on secondaries.\n * Just like with normal queries, an instance of MongoDB\\Driver\\ReadPreference needs to\n * be constructed to prefer certain servers over others */\n$prefer = MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED;\n$tags = array(\n    /* Prefer the West Coast datacenter in Iceland */\n    array(\ncountry\n =\n \niceland\n, \ndatacenter\n =\n \nwest\n),\n\n    /* Fallback to any datacenter in Iceland */\n    array(\ncountry\n =\n \niceland\n),\n\n    /* If Iceland is offline, read from whatever is online! */\n    array(),\n);\n\n/* Construct the ReadPreference object from our options */\n$rp = new MongoDB\\Driver\\ReadPreference($prefer, $tags);\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager(\nmongodb://localhost:27017\n);\n\n$query    = array(\ncitizen\n =\n \nIceland\n);\n$count    = new MongoDB\\Driver\\Command(array(\ncount\n =\n \ncollection\n, \nquery\n =\n $query));\n$retval   = $manager-\nexecuteCommand(\ndb\n, $count, $rp);\n$response = $retval-\ntoArray();\nif ($response[\nok\n]) {\n    printf(\ndb.collection has %d documents matching: %s\\n\n,\n        $response[\nn\n],\n        BSON\\toJSON(BSON\\fromArray($query))\n    );\n}\n\n?", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#running-commands", 
            "text": "", 
            "title": "Running Commands"
        }, 
        {
            "location": "/commands/#listing-databases-collections", 
            "text": "?php\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager( mongodb://localhost:27017 );\n\n\n$listdatabases = new MongoDB\\Driver\\Command(array( listDatabases  =  1));\n$retval        = $manager- executeCommand( admin , $listdatabases);\n$databases     = $retval- toArray();\n\nforeach($databases[ databases ] as $database) {\n    echo $database- name,  \\n ;\n\n    $listcollections = new MongoDB\\Driver\\Command(array( listCollections  =  1));\n    $retval          = $manager- executeCommand($database- name, $listcollections);\n    $collections     = $retval- toArray();\n    foreach($collections as $collection) {\n        echo  \\t-  , $collection- name,  \\n ;\n    }\n}\n\n?", 
            "title": "Listing databases &amp; collections"
        }, 
        {
            "location": "/commands/#create-a-user", 
            "text": "?php\n\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager( mongodb://localhost:27017 );\n\n\n$command = array(\n     createUser  =   USERNAME2 ,\n     pwd         =   PASSWORD ,\n     roles       =  array(\n        array( role  =   clusterAdmin ,          db  =   admin ),\n        array( role  =   readWriteAnyDatabase ,  db  =   admin ),\n        array( role  =   userAdminAnyDatabase ,  db  =   admin ),\n         readWrite ,\n    ),\n     writeConcern  =  array( w  =   majority ),\n);\n$createuser = new MongoDB\\Driver\\Command($command);\n\ntry {\n    $result     = $manager- executeCommand( admin , $createuser);\n    $response   = $result- toArray();\n    if ($response[ ok ]) {\n        echo  User created\\n ;\n    }\n} catch(Exception $e) {\n    echo $e- getMessage(),  \\n ;\n}\n\n\n?", 
            "title": "Create a User"
        }, 
        {
            "location": "/commands/#commands-and-readpreferences", 
            "text": "?php\n\n/* Some commands, like count, dbStats, aggregate, ... can be executed on secondaries.\n * Just like with normal queries, an instance of MongoDB\\Driver\\ReadPreference needs to\n * be constructed to prefer certain servers over others */\n$prefer = MongoDB\\Driver\\ReadPreference::RP_SECONDARY_PREFERRED;\n$tags = array(\n    /* Prefer the West Coast datacenter in Iceland */\n    array( country  =   iceland ,  datacenter  =   west ),\n\n    /* Fallback to any datacenter in Iceland */\n    array( country  =   iceland ),\n\n    /* If Iceland is offline, read from whatever is online! */\n    array(),\n);\n\n/* Construct the ReadPreference object from our options */\n$rp = new MongoDB\\Driver\\ReadPreference($prefer, $tags);\n\n/* Construct the MongoDB Manager */\n$manager = new MongoDB\\Driver\\Manager( mongodb://localhost:27017 );\n\n$query    = array( citizen  =   Iceland );\n$count    = new MongoDB\\Driver\\Command(array( count  =   collection ,  query  =  $query));\n$retval   = $manager- executeCommand( db , $count, $rp);\n$response = $retval- toArray();\nif ($response[ ok ]) {\n    printf( db.collection has %d documents matching: %s\\n ,\n        $response[ n ],\n        BSON\\toJSON(BSON\\fromArray($query))\n    );\n}\n\n?", 
            "title": "Commands and ReadPreferences"
        }, 
        {
            "location": "/ods/", 
            "text": "Object serialization\n\n\npecl/mongodb exports 4 public interfaces to facilitate serializing PHP classes to and from BSON.\n\n\n\n\nBSON\\Type\n\n\n(no methods)\n\n\n\n\n\n\nBSON\\Serializable\n\n\nabstract public method bsonSerialize();\n\n\n\n\n\n\nBSON\\Unserializable\n\n\nabstract public method bsonUnserialize(array $data);\n\n\n\n\n\n\nBSON\\Persistable\n\n\nimplements both BSON\\Serializable and BSON\\Unserializable\n\n\n\n\n\n\n\n\nObjects that implement the BSON\\Type interface get very special treatment by the BSON serializer. In\ngeneral, these objects represent a BSON type that cannot be natively represented in PHP - such as\nBSON\\UTCDatetime and BSON\\ObjectID - and are specifically checked for and handled.\nNote that implmenting BSON\\Type and or BSON\\Unserializable standalone does not do anything for\nuserland classes.\n\n\nSince BSON\\Type is a public interface, normal userland classes can indeed implement it to, and apply\ntheir own custom rules on the serialization.\nTo achieve this though, the BSON\\Serializable interface should be implemented instead, providing the\nbsonSerialize() function which should return a PHP array() representing the document that should be\nstored.\nFurthermore, if the object implements the BSON\\Persistable interface, the driver will embed a BSON\nBinary (0x80) with the fully qualified classname, into the document.\n\n\nDuring unserialization of a document, if a BSON Binary (of type 0x80) is encountered, the driver\nwill peak at the value and attempt to resolve it to a classname (triggering autoloaders if\nneccesary). If the classname cannot be resolved, no harm no faul, and nothing magical happens.\nHowever, if the class exists, the driver will call the bsonUnserialize() method of the detected\nclass, passing it the full document.\nNote that this happens depth-first, meaning any subdocuments (relations) are resolved first, and\nthen crawled upwards to the start of the document.\n\n\nExamples\n\n\nImagine the following two classes, Person and Address.\n\n\nA Person has name, age, friends (Person), and addresses (Address).\nA Person also has a secret, that we would rather not store in a database.\n\n\n?php\nclass Person implements BSON\\Persistable {\n    protected $_id;\n    protected $name;\n    protected $age;\n    protected $address = array();\n    protected $friends = array();\n    protected $secret = \nnone\n;\n\n    function __construct($name, $age) {\n        $this-\nname    = $name;\n        $this-\nage     = $age;\n        $this-\naddress = array();\n        $this-\nsecret  = \n$name confidential info\n;\n        /* Pregenerate our ObjectID */\n        $this-\n_id     = new BSON\\ObjectID();\n    }\n    function addAddress(Address $address) {\n        $this-\naddress[] = $address;\n    }\n    function addFriend(Person $friend) {\n        $this-\nfriends[] = $friend;\n    }\n    function bsonSerialize() {\n        return array(\n            \n_id\n     =\n $this-\n_id,\n            \nname\n    =\n $this-\nname,\n            \nage\n     =\n $this-\nage,\n            \naddress\n =\n $this-\naddress,\n            \nfriends\n =\n $this-\nfriends,\n        );\n    }\n    function bsonUnserialize(array $data) {\n        $this-\n_id     = $data[\n_id\n];\n        $this-\nname    = $data[\nname\n];\n        $this-\nage     = $data[\nage\n];\n        $this-\naddress = $data[\naddress\n];\n        $this-\nfriends = $data[\nfriends\n];\n    }\n}\n\nclass Address implements BSON\\Persistable {\n    protected $zip;\n    protected $country;\n\n    function __construct($zip, $country) {\n        $this-\nzip = $zip;\n        $this-\ncountry = $country;\n    }\n    function bsonSerialize() {\n        return array(\n            \nzip\n     =\n $this-\nzip,\n            \ncountry\n =\n $this-\ncountry,\n        );\n    }\n    function bsonUnserialize(array $data) {\n        $this-\nzip = $data[\nzip\n];\n        $this-\ncountry = $data[\ncountry\n];\n    }\n}\n?\n\n\n\n\n\nHannes, 31 years old, has two addresses;\n\n\n\n\nSunnyvale, USA\n\n\nKopavogur, Iceland\n\n\n\n\nHe is friends with young Jeremy, 21 year old who lives in Michigan\n\n\n?php\n$hannes = new Person(\nHannes\n, 31);\n$sunnyvale = new Address(94086, \nUSA\n);\n$kopavogur = new Address(200, \nIceland\n);\n$hannes-\naddAddress($sunnyvale);\n$hannes-\naddAddress($kopavogur);\n\n$mikola = new Person(\nJeremy\n, 21);\n$michigan = new Address(48169, \nUSA\n);\n$mikola-\naddAddress($michigan);\n\n$hannes-\naddFriend($mikola);\n?\n\n\n\n\n\nTo save this information we can insert $hannes to the database like so:\n\n\n?php\ntry {\n    $wc = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY);\n    $manager = new MongoDB\\Driver\\Manager(\nmongodb://192.168.112.10:2000\n);\n    $result = $manager-\nexecuteInsert(\ncongress.people\n, $hannes, $wc);\n    echo \nHannes has been inserted\\n\n;\n} catch(Exception $e) {\n    echo $e-\ngetMessage(), \n\\n\n;\n    exit;\n}\n?\n\n\n\n\n\nThis will result in the following document to be stored (as shown by mongo shell):\n\n\n{\n    \n_id\n : ObjectId(\n551f2004bd21b959de3c15b1\n),\n    \n__pclass\n : BinData(128,\nUGVyc29u\n),\n    \nname\n : \nHannes\n,\n    \nage\n : 31,\n    \naddress\n : [\n        {\n            \n__pclass\n : BinData(128,\nQWRkcmVzcw==\n),\n            \nzip\n : 94086,\n            \ncountry\n : \nUSA\n\n        },\n        {\n            \n__pclass\n : BinData(128,\nQWRkcmVzcw==\n),\n            \nzip\n : 200,\n            \ncountry\n : \nIceland\n\n        }\n    ],\n    \nfriends\n : [\n        {\n            \n__pclass\n : BinData(128,\nUGVyc29u\n),\n            \n_id\n : ObjectId(\n551f2004bd21b959de3c15b2\n),\n            \nname\n : \nJeremy\n,\n            \nage\n : 21,\n            \naddress\n : [\n                {\n                    \n__pclass\n : BinData(128,\nQWRkcmVzcw==\n),\n                    \nzip\n : 48169,\n                    \ncountry\n : \nUSA\n\n                }\n            ],\n            \nfriends\n : {\n\n            }\n        }\n    ]\n}\n\n\n\n\nWhen we read this document back, the driver will convert the individual subdocuments back into the\noriginal classes, as we have full type information for them now:\n\n\n?php\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY_PREFERRED);\n$query = new MongoDB\\Driver\\Query(array());\n$cursor = $manager-\nexecuteQuery(\ncongress.people\n, $query, $rp);\nforeach($cursor as $person) {\n    var_dump($person);\n}\n?\n\n\n\n\n\nWhich results in:\n\n\nobject(Person)#22 (6) {\n  [\n_id\n:protected]=\n\n  object(BSON\\ObjectID)#15 (0) {\n  }\n  [\nname\n:protected]=\n\n  string(6) \nHannes\n\n  [\nage\n:protected]=\n\n  int(31)\n  [\naddress\n:protected]=\n\n  array(2) {\n    [0]=\n\n    object(Address)#16 (2) {\n      [\nzip\n:protected]=\n\n      int(94086)\n      [\ncountry\n:protected]=\n\n      string(3) \nUSA\n\n    }\n    [1]=\n\n    object(Address)#17 (2) {\n      [\nzip\n:protected]=\n\n      int(200)\n      [\ncountry\n:protected]=\n\n      string(7) \nIceland\n\n    }\n  }\n  [\nfriends\n:protected]=\n\n  array(1) {\n    [0]=\n\n    object(Person)#21 (6) {\n      [\n_id\n:protected]=\n\n      object(BSON\\ObjectID)#18 (0) {\n      }\n      [\nname\n:protected]=\n\n      string(6) \nJeremy\n\n      [\nage\n:protected]=\n\n      int(21)\n      [\naddress\n:protected]=\n\n      array(1) {\n        [0]=\n\n        object(Address)#19 (2) {\n          [\nzip\n:protected]=\n\n          int(48169)\n          [\ncountry\n:protected]=\n\n          string(3) \nUSA\n\n        }\n      }\n      [\nfriends\n:protected]=\n\n      object(stdClass)#20 (0) {\n      }\n      [\nsecret\n:protected]=\n\n      string(4) \nnone\n\n    }\n  }\n  [\nsecret\n:protected]=\n\n  string(4) \nnone\n\n}", 
            "title": "Object Document Serialization"
        }, 
        {
            "location": "/ods/#object-serialization", 
            "text": "pecl/mongodb exports 4 public interfaces to facilitate serializing PHP classes to and from BSON.   BSON\\Type  (no methods)    BSON\\Serializable  abstract public method bsonSerialize();    BSON\\Unserializable  abstract public method bsonUnserialize(array $data);    BSON\\Persistable  implements both BSON\\Serializable and BSON\\Unserializable     Objects that implement the BSON\\Type interface get very special treatment by the BSON serializer. In\ngeneral, these objects represent a BSON type that cannot be natively represented in PHP - such as\nBSON\\UTCDatetime and BSON\\ObjectID - and are specifically checked for and handled.\nNote that implmenting BSON\\Type and or BSON\\Unserializable standalone does not do anything for\nuserland classes.  Since BSON\\Type is a public interface, normal userland classes can indeed implement it to, and apply\ntheir own custom rules on the serialization.\nTo achieve this though, the BSON\\Serializable interface should be implemented instead, providing the\nbsonSerialize() function which should return a PHP array() representing the document that should be\nstored.\nFurthermore, if the object implements the BSON\\Persistable interface, the driver will embed a BSON\nBinary (0x80) with the fully qualified classname, into the document.  During unserialization of a document, if a BSON Binary (of type 0x80) is encountered, the driver\nwill peak at the value and attempt to resolve it to a classname (triggering autoloaders if\nneccesary). If the classname cannot be resolved, no harm no faul, and nothing magical happens.\nHowever, if the class exists, the driver will call the bsonUnserialize() method of the detected\nclass, passing it the full document.\nNote that this happens depth-first, meaning any subdocuments (relations) are resolved first, and\nthen crawled upwards to the start of the document.", 
            "title": "Object serialization"
        }, 
        {
            "location": "/ods/#examples", 
            "text": "Imagine the following two classes, Person and Address.  A Person has name, age, friends (Person), and addresses (Address).\nA Person also has a secret, that we would rather not store in a database.  ?php\nclass Person implements BSON\\Persistable {\n    protected $_id;\n    protected $name;\n    protected $age;\n    protected $address = array();\n    protected $friends = array();\n    protected $secret =  none ;\n\n    function __construct($name, $age) {\n        $this- name    = $name;\n        $this- age     = $age;\n        $this- address = array();\n        $this- secret  =  $name confidential info ;\n        /* Pregenerate our ObjectID */\n        $this- _id     = new BSON\\ObjectID();\n    }\n    function addAddress(Address $address) {\n        $this- address[] = $address;\n    }\n    function addFriend(Person $friend) {\n        $this- friends[] = $friend;\n    }\n    function bsonSerialize() {\n        return array(\n             _id      =  $this- _id,\n             name     =  $this- name,\n             age      =  $this- age,\n             address  =  $this- address,\n             friends  =  $this- friends,\n        );\n    }\n    function bsonUnserialize(array $data) {\n        $this- _id     = $data[ _id ];\n        $this- name    = $data[ name ];\n        $this- age     = $data[ age ];\n        $this- address = $data[ address ];\n        $this- friends = $data[ friends ];\n    }\n}\n\nclass Address implements BSON\\Persistable {\n    protected $zip;\n    protected $country;\n\n    function __construct($zip, $country) {\n        $this- zip = $zip;\n        $this- country = $country;\n    }\n    function bsonSerialize() {\n        return array(\n             zip      =  $this- zip,\n             country  =  $this- country,\n        );\n    }\n    function bsonUnserialize(array $data) {\n        $this- zip = $data[ zip ];\n        $this- country = $data[ country ];\n    }\n}\n?   Hannes, 31 years old, has two addresses;   Sunnyvale, USA  Kopavogur, Iceland   He is friends with young Jeremy, 21 year old who lives in Michigan  ?php\n$hannes = new Person( Hannes , 31);\n$sunnyvale = new Address(94086,  USA );\n$kopavogur = new Address(200,  Iceland );\n$hannes- addAddress($sunnyvale);\n$hannes- addAddress($kopavogur);\n\n$mikola = new Person( Jeremy , 21);\n$michigan = new Address(48169,  USA );\n$mikola- addAddress($michigan);\n\n$hannes- addFriend($mikola);\n?   To save this information we can insert $hannes to the database like so:  ?php\ntry {\n    $wc = new MongoDB\\Driver\\WriteConcern(MongoDB\\Driver\\WriteConcern::MAJORITY);\n    $manager = new MongoDB\\Driver\\Manager( mongodb://192.168.112.10:2000 );\n    $result = $manager- executeInsert( congress.people , $hannes, $wc);\n    echo  Hannes has been inserted\\n ;\n} catch(Exception $e) {\n    echo $e- getMessage(),  \\n ;\n    exit;\n}\n?   This will result in the following document to be stored (as shown by mongo shell):  {\n     _id  : ObjectId( 551f2004bd21b959de3c15b1 ),\n     __pclass  : BinData(128, UGVyc29u ),\n     name  :  Hannes ,\n     age  : 31,\n     address  : [\n        {\n             __pclass  : BinData(128, QWRkcmVzcw== ),\n             zip  : 94086,\n             country  :  USA \n        },\n        {\n             __pclass  : BinData(128, QWRkcmVzcw== ),\n             zip  : 200,\n             country  :  Iceland \n        }\n    ],\n     friends  : [\n        {\n             __pclass  : BinData(128, UGVyc29u ),\n             _id  : ObjectId( 551f2004bd21b959de3c15b2 ),\n             name  :  Jeremy ,\n             age  : 21,\n             address  : [\n                {\n                     __pclass  : BinData(128, QWRkcmVzcw== ),\n                     zip  : 48169,\n                     country  :  USA \n                }\n            ],\n             friends  : {\n\n            }\n        }\n    ]\n}  When we read this document back, the driver will convert the individual subdocuments back into the\noriginal classes, as we have full type information for them now:  ?php\n$rp = new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY_PREFERRED);\n$query = new MongoDB\\Driver\\Query(array());\n$cursor = $manager- executeQuery( congress.people , $query, $rp);\nforeach($cursor as $person) {\n    var_dump($person);\n}\n?   Which results in:  object(Person)#22 (6) {\n  [ _id :protected]= \n  object(BSON\\ObjectID)#15 (0) {\n  }\n  [ name :protected]= \n  string(6)  Hannes \n  [ age :protected]= \n  int(31)\n  [ address :protected]= \n  array(2) {\n    [0]= \n    object(Address)#16 (2) {\n      [ zip :protected]= \n      int(94086)\n      [ country :protected]= \n      string(3)  USA \n    }\n    [1]= \n    object(Address)#17 (2) {\n      [ zip :protected]= \n      int(200)\n      [ country :protected]= \n      string(7)  Iceland \n    }\n  }\n  [ friends :protected]= \n  array(1) {\n    [0]= \n    object(Person)#21 (6) {\n      [ _id :protected]= \n      object(BSON\\ObjectID)#18 (0) {\n      }\n      [ name :protected]= \n      string(6)  Jeremy \n      [ age :protected]= \n      int(21)\n      [ address :protected]= \n      array(1) {\n        [0]= \n        object(Address)#19 (2) {\n          [ zip :protected]= \n          int(48169)\n          [ country :protected]= \n          string(3)  USA \n        }\n      }\n      [ friends :protected]= \n      object(stdClass)#20 (0) {\n      }\n      [ secret :protected]= \n      string(4)  none \n    }\n  }\n  [ secret :protected]= \n  string(4)  none \n}", 
            "title": "Examples"
        }
    ]
}